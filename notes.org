* General Knowledge                                                 :general:

** browser pluggin to handle accounts: metaMask

** online IDE for solidity: https://remix.ethereum.org/
** local test network: Ganache(former TestRPC)
*** Account creation
    the Ganache package creates a set of unprotected
    accounts that can be used while testing

** remote test network: Rinkeby

** javascript testing framework used: mocha


* Solidity knowledge                                               :solidity:
** solidity compiler: solc

** Compiling solidity code results in diferent components:
*** ABI (Application Binary Interface) (abiDefinition)

*** Code (EVM bytecode):                                           :ethereum:
    The code that is actualy deployed and executed in the blockchain

*** Other General information about the contract:
**** source code
**** language
**** language version
**** compiler version
**** userDoc
**** developerDoc
** Global Variables
*** msg
    Describes who sent the transaction and the transaction itself.
    The msg object is available on contract creation and on any transaction.
**** Properties
***** msg.data
      'Data' field from the call or transaction that invoked the current function
***** msg.gas
      Amount of gas the current function invocation has available
***** msg.sender
      Address of the account that started the current function invocation
***** msg.value
      Amount of ether (in wei) that was sent along with the function invocation
*** block
    Describes the current block
*** now
    alias to block.timestamp

** Global Functions
*** require()
    Used to validate some boolean expression, in case the result is false
    it rejects the transaction
*** keccak256()
    hashes the feeded parameters (similar to sha-3 hashing)
** Basic Types
*** string
    sequence of characters
    (its represented as a dynamic array. see arrays gotchas)
*** bool
    boolean value
*** int
    integer, positive or negative
    diferent sizes: int8, int16, int32, ..., int256 (int == int256)
*** uint
    unsigned int, positive number
    diferent sizes: uint8, uint16, uint32, ..., uint256 (uint == uint256)
*** fixed/ufixed
    fixed point number.
*** address
    has methods tied to it for handling money
**** transfer(eth)
     transfers the amount eth to the address
** Reference Types
*** fixed array
    Array that contains a single type of element. Has an unchanging length.
    example: int[3]
**** Gotcha
     Solidity world allows for creation of nested arrays BUT ABI/JS/Web3
     world doesn't (yet).
*** dynamic array
    Array that contains a single type of element. Can change in size over time.
    example: int[]
**** Gotcha
     Solidity world allows for creation of nested arrays BUT ABI/JS/Web3
     world doesn't (yet).
*** mapping
    Collection of key value pairs. All keys must be the samy type, all values
    must be the same type.
    example: mapping(string => bool)
*** struct
    Collection of key value pairs that can have different types.
    example: struct Car { string make; string model; uint value; }
** Common Function Types
*** Access modifiers
**** public
     Anyone can call this function
**** private
     Only this contract can call this function
*** Functionality
**** view
     This function returns data and does not modify the contract's data
**** constant
     This function returns data and does not modify the contract's data
**** pure
     Function will not modify or even read the contract's data
**** payable
     When someone call this function they might send ether along
*** Modifier
    function modifiers are used to execute repeatable code before the function

* Ethereum knowledge                                               :ethereum:

** Contract deployment
   The bytecode resulting from the compilation of solidity code
   can be deployed to the blockchain as a smartcontract.

   In order to deploy a contract we can run our own node to get
   access to the network or use a service like infura (infura.io).


** TODO Transaction

*** TODO how gas works


* Blockchain knowledge                                           :blockchain:


* Cryptocurrency knowledge                                   :cryptocurrency:


* Glossary
** ABI:                                                            :solidity:
   The interface between contracts in the ethereum ecosystem,
   both from the outside and contract-to-contract interaction

** Web3:                                                         :blockchain:
   Library to get programatic access to a deployed contract.
   Interacts with a provider, wich in turn interacts with a network
*** Web3 0.x.x <- more primitive interface, only callbacks for async code
*** Web3 1.x.x <- support for promises + async/await

** EVM (Ethereum Virtual Machine):                                 :ethereum:
   Is the runtime environment for smart contracts in Ethereum.
   It is the fundamental consensus mechanism for Ethereum.

** Provider:                                   :solidity:blockchain:ethereum:
   The communication layer with the blockchain.
   Instructs web3 about the network it is connected to as well
   as what accounts it is connected to.

*** WebsocketProvider

*** HttpProvider

*** IpcProvider

** Smart Contract (also refered as contract):             :ethereum:solidity:
   A computer protocol intended to digitally facilitate, verify
   or enforce the negotiation or performance of an arrangement
   between two or more parties

** TODO Network (as in main vs tests):                             :ethereum:


* External links

** Ethereum for Web Developers: https://medium.com/@mvmurthy/ethereum-for-web-developers-890be23d1d0c
** Life Cycle of an Ethereum Transaction: https://medium.com/blockchannel/life-cycle-of-an-ethereum-transaction-e5c66bae0f6e
